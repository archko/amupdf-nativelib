/*CHANGE necessary properties in project.gradle*/
apply from: 'project.gradle'
defaultTasks 'buildNativeLibs'

buildscript {
    repositories { mavenCentral() }
}

/*DJVU CHAIN*/
task downloadDjvu {
    doLast {
        def djvuFolder = new File(libdjvu)
        if (djvuFolder.exists()) {
            // Switch to master so we can properly pull if it was
            // detached.
            exec {
                commandLine = ['git', '-C', libdjvu, 'checkout', '-f', 'master']
            }
            // Fetch
            exec {
                commandLine = ['git', '-C', libdjvu, 'fetch', 'origin']
            }
        } else {
            exec {
                //origin at git://git.code.sf.net/p/djvu/djvulibre-git
                commandLine = ['git', 'clone', 'https://github.com/max-kammerer/djvulibre.git', libdjvu]
            }
        }

        exec {
            workingDir file(libdjvu)
            commandLine = ['git', 'checkout', 'a8ae572254a6cf5c0f036e655daf3517a0452e07']
        }
    }
}

//Keep until migration
task downloadAndPatchDjvu(dependsOn: [downloadDjvu])

task buildDjvu() {
    doLast {
        exec {
            workingDir file(djvuModule)
            commandLine ndkDir + "/ndk-build"
        }
    }
}

task djvuChain(dependsOn: [buildDjvu])

buildDjvu.mustRunAfter downloadDjvu

/*MUPDF CHAIN*/
task downloadLibArchive {
    def version = "v3.7.4"

    doLast {
        def folder = new File(libarchive)
        if (folder.exists()) {
            exec {
                commandLine = ['git', '-C', libmupdf, 'checkout', '-f', 'master']
            }
            // Fetch
            exec {
                commandLine = ['git', '-C', libmupdf, 'fetch', 'origin']
            }
        } else {
            exec {
                commandLine = ['git', 'clone', 'https://github.com/libarchive/libarchive.git', libarchive]
            }
        }

        exec {
            workingDir file(folder)
            commandLine = ['git', 'checkout', version]
        }
    }
}

task downloadMupdf {
    def version = "1.24.8"

    doLast {
        def mupdfFolder = new File(libmupdf)
        if (mupdfFolder.exists()) {
            // Switch to master so we can properly pull if it was
            // detached.
            exec {
                commandLine = ['git', '-C', libmupdf, 'checkout', '-f', 'master']
            }
            // Fetch
            exec {
                commandLine = ['git', '-C', libmupdf, 'fetch', 'origin']
            }
        } else {
            exec {
                commandLine = ['git', 'clone', 'https://github.com/ArtifexSoftware/mupdf.git', libmupdf]
            }
        }

        exec {
            workingDir file(libmupdf)
            commandLine = ['git', 'checkout', version]
        }

        exec {
            workingDir file(libmupdf)
            commandLine 'git', 'submodule', 'init'
        }
        exec {
            workingDir file(libmupdf)
            commandLine 'git', 'submodule', 'update'
        }
    }
}

task downloadAndMakeMupdf(dependsOn: [downloadMupdf]) {
    doLast {
        /*For more details see mupdf/platform/android/viewer/ReadMe.txt*/
        exec {
            workingDir file(libmupdf)
            commandLine 'make', 'generate'
        }
    }
}

task buildMupdf() {
    doLast {
        exec {
            workingDir file(mupdfModule)
            commandLine ndkDir + "/ndk-build"
        }
    }
}

task mupdfChain(dependsOn: [downloadAndMakeMupdf, buildMupdf])

/*Antiword CHAIN*/
task downloadAntiword {
    doLast {
        def folder = new File(libantiword)
        if (folder.exists()) {
            exec {
                commandLine = ['git', '-C', libantiword, 'checkout', '-f', 'master']
            }
            // Fetch
            exec {
                commandLine = ['git', '-C', libantiword, 'fetch', 'origin']
            }
        } else {
            exec {
                commandLine = ['git', 'clone', 'https://github.com/grobian/antiword.git', libantiword]
            }
        }

        exec {
            workingDir file(libantiword)
        }
    }
}

/*Mobi CHAIN*/
task downloadMobi {
    doLast {
        def folder = new File(libmobi)
        if (folder.exists()) {
            exec {
                commandLine = ['git', '-C', libmobi, 'checkout', '-f', 'master']
            }
            // Fetch
            exec {
                commandLine = ['git', '-C', libmobi, 'fetch', 'origin']
            }
        } else {
            exec {
                commandLine = ['git', 'clone', 'https://github.com/bfabiszewski/libmobi.git', libmobi]
            }
        }

        exec {
            workingDir file(libmobi)
        }
    }
}

mupdfChain.mustRunAfter djvuChain

task antiwordChain(dependsOn: [downloadAntiword])

antiwordChain.mustRunAfter mupdfChain

task mobiChain(dependsOn: [downloadMobi])

mobiChain.mustRunAfter antiwordChain

/*!!!!!!!!!!RUN ME!!!!!!!!*/
task buildNativeLibs(dependsOn: [djvuChain, mupdfChain, antiwordChain, mobiChain])
